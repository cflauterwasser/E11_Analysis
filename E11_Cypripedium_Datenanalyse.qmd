---
title: "E11 Cypripedium - Analyse signifikanter Umweltparameter"
author: "Nele Herzig und Caspar Lauterwasser"
format: html
output-file: "index.html"
output-dir: "/docs"
toc: true
toc-location: left
toc-title: INHALTSVERZEICHNIS
editor: visual
---

<br>

# **1. Vorbereitende Schritte**

<br>

## Genutze R-*Packages*

```{r}
#| warning: false
#| output: false
library(openxlsx)
library(MASS)
library(plotrix)
library(agricolae)
library(patchwork)
library(tidyverse)
library(magrittr)
library(performance)
library(corrplot)
```

<br>

## Selbsterstellte Funktionen

Nutzung mit freundlicher Genehmigung von [Markus Bernhardt-Römermann](https://www.ecology.uni-jena.de/66/markus-bernhardt-roemermann).

```{r}
invlogit <- function(x) return(round(exp(x) / (1 + exp(x)), 3))


rename.letters <- function(x) {
  x$groups <- as.character(x$groups)
  if (grepl("a", x$groups[1])) {
    new.letters <- x$groups
  } else {
    which.letters <- unique(strsplit(paste(x$groups, collapse = ""), "")[[1]]) 
    which.letters <- which.letters[order(which.letters)]
    tab.translate <- data.frame(orig = unique(strsplit(paste(x$groups, collapse = ""), "")[[1]]), new = NA) 
    tab.translate$orig <- as.character(tab.translate$orig)
    tab.translate$new[1] <- "a"
    which.letters <- which.letters[-(which.letters %in% tab.translate$new[1])] 
    for (j in 2:dim(tab.translate)[1]) { # j=3
      if (!(tab.translate[j, "orig"] %in% which.letters)) {
        tab.translate[j, "new"] <- which.letters[order(which.letters)][1]
      } else {
        tab.translate[j, "new"] <- tab.translate[j, "orig"]
      }
      which.letters <- which.letters[-(which.letters %in% tab.translate$new[j])]
    }
    new.letters <- rep(NA, dim(x)[1])
    for (k in 1:dim(x)[1]) { # k = 1
      new.letters[which(x$groups %in% tab.translate$orig[k])] <- tab.translate$new[k]
    }
    if (any(is.na(new.letters))) {
      for (l in which(is.na(new.letters))) { # l=3
        multi.letter <- unique(strsplit(paste(x$groups[l], collapse = ""), "")[[1]]) 
        for (m in 1:length(multi.letter)) { # m = 1
          multi.letter[m] <- tab.translate$new[which(tab.translate$orig %in% multi.letter[m])]
        }
        multi.letter <- multi.letter[order(multi.letter)]
        new.letters[l] <- paste0(multi.letter, collapse = "")  
      }
    }
  }
  x$groups <- new.letters
  return(x)
}



pplot_reg.lines.single.plots <- function(model_final, df.year, year) {
  expl.vars <- data.frame(orig.name = colnames(model_final$model), stringsAsFactors = FALSE)
  expl.vars$new.name <- result.tab$env.names[match(expl.vars$orig.name, result.tab$parameter)]
  
  if (any(sapply(model_final$model, class) == "factor")) {
    factor.vars <- colnames(model_final$model)[which(sapply(model_final$model, class) == "factor")]
    expl.vars <- expl.vars[(expl.vars$orig.name != factor.vars), ]
  }
  for (i in 2:dim(expl.vars)[1]) { # i=2
    plots_reg.lines.single <- ggplot(data = df.year, aes_string(y = expl.vars$orig.name[1], x = expl.vars$orig.name[i])) + 
      geom_point(colour = "black", alpha = 0.25, shape = 16, size = 0.6) +
      geom_smooth(method = MASS::glm.nb, formula = y ~ x, color = "darkgreen", se = TRUE, fill = "green", alpha = 0.35) + 
      labs(x = expl.vars$new.name[i], y = expl.vars$new.name[1]) +
      theme(panel.background = element_blank(),
            panel.border = element_rect(colour = "black", fill = NA),
            plot.margin = unit(c(0, 0.05, 0.2, 0), "cm"),
            legend.position = "none")
    #### ploting
    file_name <- paste0("Plots/regline_", expl.vars$orig.name[1], "_", expl.vars$orig.name[i], "_", year, "_alternative", ".png")
    ggsave(filename = file_name, plot = plots_reg.lines.single, width = 7.4, height = 7.4, units = "cm")
  }
}



write_model_table <- function(model.result = NULL, file.name = NULL) {
  
  if (file.name %in% list.files()) {
    wb.model.tables <- loadWorkbook(xlsxFile = file.name)
  } else {
    wb.model.tables <- createWorkbook() 
  }
  
  dep_var <- names(attributes(summary(model.result)$term)$dataClasses[1])
  if (grepl(pattern = "(", dep_var, fixed = TRUE)) {
    start.p <- regexpr(pattern = "(", text = dep_var, fixed = TRUE)[1] + 1
    if (grepl(pattern = ",", dep_var, fixed = TRUE)) {
      end.p <- regexpr(pattern = ",", text = dep_var, fixed = TRUE)[1] - 1
    } else {
      end.p <- regexpr(pattern = ")", text = dep_var, fixed = TRUE)[1] - 1
    }
    dep_var <- str_sub(dep_var, start = start.p, end = end.p)
  }
  coef_table <- as.data.frame(summary(model.result)$coefficients)
  coef_table[, 1] <- round(coef_table[, 1], 3)
  coef_table[, 2] <- round(coef_table[, 2], 3)
  coef_table[, 3] <- round(coef_table[, 3], 3)
  coef_table[, 4] <- round(coef_table[, 4], 4)
  
  style_border <- createStyle(border = "TopBottomLeftRight ", borderStyle = "thin", borderColour = "black")
  style_header <- createStyle(border = "TopBottomLeftRight", fgFill = "lightgrey")
  
  if (length(names(wb.model.tables) != 0)) {
    if (dep_var %in% names(wb.model.tables))
      removeWorksheet(wb.model.tables, sheet = dep_var)
  }
  addWorksheet(wb.model.tables, sheetName = dep_var)
  
  writeData(wb.model.tables, sheet = dep_var, headerStyle = style_header, rowNames = TRUE, x = coef_table)
  addStyle(wb.model.tables, sheet = dep_var, style = style_border, rows = 1:(dim(coef_table)[1] + 1), cols = 1:(dim(coef_table)[2] + 1), stack = TRUE, gridExpand = TRUE)
  
  # save table with model results
  saveWorkbook(wb.model.tables, file = file.name, overwrite = TRUE)
}
```

<br>

## Einlesen der Daten von 2019 und 2024

```{r}
# 2024
ind_data_2024 <- read.xlsx("datalike2019.xlsx", sheet = 1)
str(ind_data_2024)

# 2019
ind_data_2019 <- read.xlsx("individuals_data.xlsx", sheet = 1)
str(ind_data_2019)
```

<br>

## Vorbereitung der Daten

```{r}
ind_data_2024 <- ind_data_2024 |> 
  mutate(leaf.area = l.leaves*w.leaves)


ind_data_2024$management2 <- factor(ind_data_2024$management2,
                                    levels = c("Wald", "Hang", "Buche", "Fichte"),
                                    labels = c("Kiefer (n. entb.)", "Kiefer (entb.)", "Buche", "Fichte"))



ind_data_2019$management2 <- factor(ind_data_2019$management2,
                               levels = c("CC", "5yr", "beech_forest", "spruce_forest"),
                               labels = c("Kiefer (n. entb.)", "Kiefer (entb.)", "Buche", "Fichte"))

ind_data_2019 <- ind_data_2019 %>%
  mutate(soil_water = rowMeans(select(., soil_water1, soil_water2)))


# area.bunch from cm² to m²
ind_data_2024$area.bunch <- ind_data_2024$area.bunch / 10000
ind_data_2019$area.bunch <- ind_data_2019$area.bunch / 10000
```

<br>

<br>

# **2. Ergebnistabelle(n) und Boxplots**

<br>

## Ergebnistabelle Flächenvergleich

<br>

Berechnung der Mittelwerte und Standardfehler.

```{r}
means <- aggregate(. ~ management2, data = ind_data_2024[, c(6:27)], mean)
se <- aggregate(. ~ management2, data = ind_data_2024[, c(6:27)], std.error)
```

Erstellung der Ergebnistabelle

```{r}
result.tab <- data.frame(matrix(NA, nrow = 21, ncol = 13))
rownames(result.tab) <- colnames(ind_data_2024[, c(6:13, 15:27)])
colnames(result.tab) <- c("parameter", levels(ind_data_2024$management2), "F.val", "df", "P.val", "Signif", paste0(levels(ind_data_2024$management2), ".letter"))
```

ANOVA und Tukey's HSD Test

```{r}
for (i in 1:dim(result.tab)[1]) { # i = 13
  temp <- rownames(result.tab)[i]
  mean.se <- paste0(format(round(means[, temp], 2), nsmall = 2), "±", format(round(se[, temp], 3), nsmall = 3))
  mean.se <- gsub(" ", "", mean.se)
  aov1 <- aov(as.formula(paste0(temp, " ~ management2")), data = ind_data_2024) 
  anova1 <- summary(aov1)
  TukeyHSD.letters <- HSD.test(aov1, "management2", group = TRUE)
  TukeyHSD.letters <- TukeyHSD.letters$groups
  TukeyHSD.letters <- TukeyHSD.letters[order(match(rownames(TukeyHSD.letters), levels(ind_data_2024$management2))),]
  
  
  TukeyHSD.letters <- rename.letters(TukeyHSD.letters)
  TukeyHSD.letters <- as.character(TukeyHSD.letters[, "groups"])
  degfr <- paste(anova1[[1]]$Df, collapse = " and ")
  fval <- format(round(anova1[[1]]$"F value"[1], 2), nsmall = 2)
  pval <- round(anova1[[1]]$"Pr(>F)"[1], digits = 4)
  symp <- symnum(pval, corr = FALSE,
                 cutpoints = c(0,  .001,.01,.05, 1),
                 symbols = c("***","**","*","n.s."))
  pval <- format.pval(pval, eps = .001, digits = 2)
  res_temp <- c(temp, mean.se, fval, degfr, pval, symp, TukeyHSD.letters)
  result.tab[i, ] <- res_temp
}
```

Benennung der Umweltvariablen

```{r}
result.tab$env.names <- c("Sprossanzahl pro Horst", "Sprossanzahl pro m² Horstgröße", "Horstgröße [m²]", "Anzahl blühender Sprosse", "Anteil blühender Sprosse [%]", "Sprosshöhe [cm]", "Blattlänge [cm]", "Blattbreite [cm]", "Exposition [°]", "Neigung [%]", "Bodentiefe [cm]", "Bodenfeuchte [%]", "Photosynthetisch aktive Strahlung [%]", "Deckung Krautschicht [%]", "Deckung Strauchschicht [%]", "Deckung Baumschicht [%]", "Deckung offener Boden [%]", "Deckung Moosschicht [%]", "Maximale Vegetationshöhe [cm]", "Höhe 90% der Vegetation [cm]","Blattfläche [cm²]")
```

```{r}
result.tab
```

Exportierung der Ergebnistabelle

```{r, eval=FALSE}
write.xlsx(result.tab, "Result Tables/results.diff.2024.xlsx")
```

<br>

## Boxplots zu Flächenvergleich von Umweltparametern

```{r, eval=FALSE}
for (i in 1:dim(result.tab)[1]) { # i = 11
  temp.x <- rownames(result.tab)[i]
  temp.y <- "management2"
  range.y <- range(ind_data_2024[, temp.x], na.rm = TRUE)
  plus.temp <- diff(range.y) * 0.1
  range.y[1] <- range.y[1] * 0.9
  range.y[2] <- range.y[2] * 1.1
  max.y <- aggregate(as.formula(paste0(temp.x, " ~ management2")), data = ind_data_2024, FUN = function(X) max(X, na.rm = TRUE))
  temp.env.name <- result.tab[i, "env.names"] 
  
  p <- ggplot(ind_data_2024, aes_string(x = temp.y, y =  temp.x)) + 
    geom_boxplot(fill = c("forestgreen", "gold", "firebrick", "darkblue")) +
    labs(x = "
         ", y = temp.env.name) +
    ylim(range.y) +
    geom_text(x = 1, y = max.y[1, 2] + plus.temp, label = result.tab[i, 10]) +
    geom_text(x = 2, y = max.y[2, 2] + plus.temp, label = result.tab[i, 11]) +
    geom_text(x = 3, y = max.y[3, 2] + plus.temp, label = result.tab[i, 12]) +
    geom_text(x = 4, y = max.y[4, 2] + plus.temp, label = result.tab[i, 13]) +
    theme(panel.background = element_blank(),
          panel.border = element_rect(colour = "black", fill = NA),
          axis.title.y = element_text(),
          plot.margin = unit(c(0, 0.0, 0.2, 0), "cm")) 
  file_name <- paste0("Plots/boxplot_", temp.x, "_2024.png")
  ggsave(filename = file_name, plot = p, width = 7.4, height = 7.4, units = "cm")
}
```

<br>

<br>

# **3. Ökologische Modellierung 2024**

<br>

## Korrelationsmatrix

```{r}
#| warning: false
#| output: false

subsetcorr <- subset(ind_data_2024, select=c(nb.stem, stem.per.sqm, prop.flower, area.bunch, nb.flower, stem.height, exposition, slope, soil_depth, soil_water, PAR, HL_cover, SL_cover, soil_cover, moss_cover, TL_cover, vh.max, vh.90, l.leaves, w.leaves))
#add leaf area
subsetcorr <- subsetcorr %>%
  mutate(leaf.area = w.leaves * l.leaves)
#make matrix
cormatrix <- cor(subsetcorr)
corpvalues <- cor.mtest(subsetcorr)
#matrix with numbers
png("Plots/corrmatrix_numbers_2024.png", width = 25, height = 25, units = "cm", res = 300)
corrplot(cormatrix, p.mat=corpvalues$p, type="upper", method="number")
dev.off()
#matrix with circles
png("Plots/corrmatrix_circle_2024.png", width = 25, height = 25, units = "cm", res = 300)
corrplot(cormatrix, p.mat=corpvalues$p, type="upper", method="circle")
dev.off()

```

```{r}
#| warning: false
#| output: true

corrplot(cormatrix, p.mat=corpvalues$p, type="upper", method="number")
corrplot(cormatrix, p.mat=corpvalues$p, type="upper", method="circle")
```

## Modell zu Sprossanzahl pro Horst (nb.stem)

Erstellen und Simplifikation des Modells. Außerdem Exportieren der Ergebnisse in Excel-Datei.

```{r}
#| warning: false
#| output: false

glm1 <- glm.nb(nb.stem ~ management2 + exposition + slope + soil_depth + soil_water + PAR + HL_cover + SL_cover + TL_cover + soil_cover + moss_cover + vh.max + vh.90, data = ind_data_2024)
summary(glm1)

glm2 <- stepAIC(glm1)
summary(glm2)

glm3 <- update(glm2, .~. -soil_water)
anova(glm2, glm3)
summary(glm3)


model_final <- glm3
```

```{r, eval=FALSE}
write_model_table(model.result = model_final, file.name = "Model.result.tables_2024.xlsx")
```

```{r}
summary(model_final)
```

Testen der Modell-Voraussetzungen.

```{r}
par(mfrow = c(2, 2))
plot(model_final)
par(mfrow = c(1, 1))

check_model(model_final)
```

### Visualisierungen

**Sprosszahl \~ Alle signifikanten Umweltvariablen**

```{r, eval=FALSE}

# leicht bearbeitete Funktion aus der Analyse von 2019 für nichtlineare Regression
pplot_reg.lines.single.plots(model_final, ind_data_2024, 2024)
```

<br>

## Modell zu Horstgröße (area.bunch)

Erstellen und Simplifikation des Modells. Außerdem Exportieren der Ergebnisse in Excel-Datei.

```{r}
#| warning: false
#| output: false

lm1 <- lm(log(area.bunch) ~ management2 + exposition + slope + soil_depth + soil_water + PAR + HL_cover + SL_cover + TL_cover + soil_cover + moss_cover + vh.max + vh.90, data = ind_data_2024)
#plot(lm2)
summary(lm1)

lm2 <- stepAIC(lm1)
summary(lm2)

lm3 <- update(lm2, .~. -TL_cover)
anova(lm2, lm3)
summary(lm3)

lm4 <- update(lm3, .~. -moss_cover)
anova(lm3, lm4)
summary(lm4)


model_final <- lm4
```

```{r, eval=FALSE}
write_model_table(model.result = model_final, file.name = "Model.result.tables_2024.xlsx")
```

```{r}
summary(model_final)
```

Testen der Modell-Voraussetzungen.

```{r}
par(mfrow = c(2, 2))
plot(model_final)
par(mfrow = c(1, 1))

check_model(model_final)
```

### Visualisierungen

**Horstgröße \~ Bodentiefe**

```{r}
lm.soil_depth <- lm(log(area.bunch) ~ soil_depth, data = ind_data_2024)
range.x <- range(ind_data_2024$soil_depth)
new.x <- data.frame(soil_depth = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.soil_depth,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(soil_depth = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(ind_data_2024, aes(x = soil_depth, y = log(area.bunch))) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = soil_depth, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = soil_depth, ymin = lower, ymax = upper),
              data = new.y,
              color = NA, fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Bodentiefe [cm]",
       y = "Horstgröße [m²]") +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_log(area.bunch)~soil_depth_2024.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

**Horstgröße \~ Deckung Krautschicht**

```{r}
lm.HL_cover <- lm(log(area.bunch) ~ HL_cover, data = ind_data_2024)
range.x <- range(ind_data_2024$HL_cover)
new.x <- data.frame(HL_cover = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.HL_cover,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(HL_cover = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(ind_data_2024, aes(x = HL_cover, y = log(area.bunch))) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = HL_cover, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = HL_cover, ymin = lower, ymax = upper),
              data = new.y,
              color = NA, fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Deckung Krautschicht [%]",
       y = "Horstgröße [m²]") +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_log(area.bunch)~HL_cover_2024.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

<br>

## Modell zu Blüherfolg (cbind(nb.flower, nb.stem))

Erstellen und Simplifikation des Modells. Außerdem Exportieren der Ergebnisse in Excel-Datei.

```{r}
#| warning: false
#| output: false

glm1 <- glm(cbind(nb.flower, nb.stem) ~ management2 + exposition + slope + soil_depth + soil_water + PAR + HL_cover + SL_cover + TL_cover + soil_cover + moss_cover + vh.max + vh.90, data = ind_data_2024, family = binomial)

summary(glm1)

glm2 <- stepAIC(glm1)
summary(glm2)

glm3 <- update(glm2, .~. -soil_depth)
anova(glm2, glm3)
summary(glm3)


model_final <- glm3
```

```{r, eval=FALSE}
write_model_table(model.result = model_final, file.name = "Model.result.tables_2024.xlsx")
```

```{r}
summary(model_final)
```

Testen der Modell-Voraussetzungen.

```{r}
par(mfrow = c(2, 2))
plot(model_final)
par(mfrow = c(1, 1))

check_model(model_final)
```

### Visualisierungen

**Blüherfolg \~ Bodenfeuchte**

```{r}
lm.soil_water <- lm(car::logit(prop.flower, adjust = 0.0001) ~ soil_water, data = ind_data_2024)
range.x <- range(ind_data_2024$soil_water)
new.x <- data.frame(soil_water = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.soil_water,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(soil_water = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = invlogit(fit - 1.96*se.fit), 
         point.estimate = invlogit(fit), 
         upper = invlogit(fit + 1.96*se.fit)) 


plot <- ggplot(data = ind_data_2024,
               aes_string(y = "prop.flower", x = "soil_water")) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = soil_water, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = soil_water, ymin = lower, ymax = upper),
              data = new.y,
              color = NA,
              fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Bodenfeuchte [%]",
       y = "Anteil blühender Sprosse [%]") +
  scale_y_continuous(labels = seq(0, 100, 25)) +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        plot.margin = unit(c(0, 0.05, 0.2, 0), "cm"),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_prop.flower~soil_water_2024.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

**Blüherfolg \~ Deckung Krautschicht**

```{r}
lm.HL_cover <- lm(car::logit(prop.flower, adjust = 0.0001) ~ HL_cover, data = ind_data_2024)
range.x <- range(ind_data_2024$HL_cover)
new.x <- data.frame(HL_cover = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.HL_cover,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(HL_cover = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = invlogit(fit - 1.96*se.fit), 
         point.estimate = invlogit(fit), 
         upper = invlogit(fit + 1.96*se.fit)) 


plot <- ggplot(data = ind_data_2024,
               aes_string(y = "prop.flower", x = "HL_cover")) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = HL_cover, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = HL_cover, ymin = lower, ymax = upper),
              data = new.y,
              color = NA,
              fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Deckung Krautschicht [%]",
       y = "Anteil blühender Sprosse [%]") +
  scale_y_continuous(labels = seq(0, 100, 25)) +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        plot.margin = unit(c(0, 0.05, 0.2, 0), "cm"),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_prop.flower~HL_cover_2024.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

<br>

## Modell zu Sprosshöhe (stem.height)

Erstellen und Simplifikation des Modells. Außerdem Exportieren der Ergebnisse in Excel-Datei.

```{r}
#| warning: false
#| output: false

lm1 <- lm(log(stem.height) ~ management2 + exposition + slope + soil_depth + soil_water + PAR + HL_cover + SL_cover + TL_cover + soil_cover + moss_cover + vh.max + vh.90, data = ind_data_2024)

#plot(lm1)
summary(lm1)

#lm2 <- stepAIC(lm1)
#summary(lm2)
#edit 2024: left out stepAIC to manually test if there is really nothing significant to model

lm2 <- update(lm1, .~. -soil_water)
anova(lm1, lm2)
summary(lm2)

lm3 <- update(lm2, .~. -soil_depth)
anova(lm2, lm3)
summary(lm3)

lm4 <- update(lm3, .~. -management2)
anova(lm4, lm3)
summary(lm4)

lm5 <- update(lm4, .~. -slope)
anova(lm4, lm5)
summary(lm5)

lm6 <- update(lm5, .~. -PAR)
anova(lm5, lm6)
summary(lm6)

lm7 <- update(lm6, .~. -exposition)
anova(lm6, lm7)
summary(lm7)

lm8 <- update(lm7, .~. -HL_cover)
anova(lm7, lm8)
summary(lm8)

lm9 <- update(lm8, .~. -vh.max)
anova(lm8, lm9)
summary(lm9)

lm10 <- update(lm9, .~. -vh.90)
anova(lm9, lm10)
summary(lm10)

lm11 <- update(lm10, .~. -SL_cover)
anova(lm10, lm11)
summary(lm11)

lm12 <- update(lm11, .~. -moss_cover)
anova(lm11, lm12)
summary(lm12)

lm13 <- update(lm12, .~. -TL_cover)
anova(lm12, lm13)
summary(lm13)

model_final <- lm13
```

```{r, eval=FALSE}
write_model_table(model.result = model_final, file.name = "Model.result.tables_2024.xlsx")
```

```{r}
summary(model_final)
```

**Modell weist keine signifikante Korrelation mit Umweltvariablen auf!**

Testen der Modell-Voraussetzungen.

```{r}
par(mfrow = c(2, 2))
plot(model_final)
par(mfrow = c(1, 1))

check_model(model_final)
```

<br>

## Modell zu Sprossanzahl pro m² Horstgröße (stem.per.sqm)

Erstellen und Simplifikation des Modells. Außerdem Exportieren der Ergebnisse in Excel-Datei.

```{r}
#| warning: false
#| output: false

lm1 <- lm(stem.per.sqm ~ management2 + exposition + slope + soil_depth + soil_water + PAR + HL_cover + SL_cover + TL_cover + soil_cover + moss_cover + vh.max + vh.90, data = ind_data_2024)
summary(lm1)

lm2 <- stepAIC(lm1)
summary(lm2)

lm3 <- update(lm2, .~. -PAR)
anova(lm2, lm3)
summary(lm3)

lm4 <- update(lm3, .~. -HL_cover)
anova(lm3, lm4)
summary(lm4)


model_final <- lm4
```

```{r, eval=FALSE}
write_model_table(model.result = model_final, file.name = "Model.result.tables_2024.xlsx")
```

```{r}
summary(model_final)
```

Testen der Modell-Voraussetzungen.

```{r}
par(mfrow = c(2, 2))
plot(model_final)
par(mfrow = c(1, 1))

check_model(model_final)
```

### Visualisierungen

**Sprossanzahl pro m² Horstgröße \~ Höhe 90% der Vegetation**

```{r}
lm.vh.90 <- lm(stem.per.sqm ~ vh.90, data = ind_data_2024)
range.x <- range(ind_data_2024$vh.90)
new.x <- data.frame(vh.90 = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.vh.90,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(vh.90 = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(ind_data_2024, aes(x = vh.90, y = stem.per.sqm)) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = vh.90, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = vh.90, ymin = lower, ymax = upper),
              data = new.y,
              color = NA, fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Höhe 90% der Vegetation [cm]",
       y = "Sprossanzahl pro m² Horstgröße") +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_stem.per.sqm~vh.90_2024.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

<br>

## Modell zu Blattfläche (leaf.area)

Erstellen und Simplifikation des Modells. Außerdem Exportieren der Ergebnisse in Excel-Datei.

```{r}
#| warning: false
#| output: false

lm1 <- lm(leaf.area ~ management2 + exposition + slope + soil_depth + soil_water + PAR + HL_cover + SL_cover + TL_cover + soil_cover + moss_cover + vh.max + vh.90, data = ind_data_2024)
summary(lm1)

lm2 <- stepAIC(lm1)
summary(lm2)

lm3 <- update(lm2, .~. -exposition)
anova(lm2, lm3)
summary(lm3)


model_final <- lm3
```

```{r, eval=FALSE}
write_model_table(model.result = model_final, file.name = "Model.result.tables_2024.xlsx")
```

```{r}
summary(model_final)
```

Testen der Modell-Voraussetzungen.

```{r}
par(mfrow = c(2, 2))
plot(model_final)
par(mfrow = c(1, 1))

check_model(model_final)
```

### Visualisierungen

**Blattfläche \~ Deckung offener Boden**

```{r}
lm.soil_cover <- lm(leaf.area ~ soil_cover, data = ind_data_2024)
range.x <- range(ind_data_2024$soil_cover)
new.x <- data.frame(soil_cover = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.soil_cover,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(soil_cover = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(ind_data_2024, aes(x = soil_cover, y = leaf.area)) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = soil_cover, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = soil_cover, ymin = lower, ymax = upper),
              data = new.y,
              color = NA, fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Deckung offener Boden [%]",
       y = "Blattfläche [cm²]") +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        legend.position = "none")


plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_leaf.area~soil_cover_2024.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

<br>

## Modell zu Deckung Krautschicht (HL_cover)

Erstellen und Simplifikation des Modells. Außerdem Exportieren der Ergebnisse in Excel-Datei.

```{r}
#| warning: false
#| output: false

lm1 <- lm(HL_cover ~ management2 + exposition + slope + soil_depth + soil_water + PAR + SL_cover + TL_cover + soil_cover + moss_cover + vh.max + vh.90, data = ind_data_2024)
summary(lm1)

lm2 <- stepAIC(lm1)
summary(lm2)

lm3 <- update(lm2, .~. -vh.max)
anova(lm2, lm3)
summary(lm3)


model_final <- lm3
```

```{r, eval=FALSE}
write_model_table(model.result = model_final, file.name = "Model.result.tables_2024.xlsx")
```

```{r}
summary(model_final)
```

Testen der Modell-Voraussetzungen.

```{r}
par(mfrow = c(2, 2))
plot(model_final)
par(mfrow = c(1, 1))

check_model(model_final)
```

### Visualisierungen

**Deckung Krautschicht \~ Deckung Strauchschicht**

```{r}
lm.SL_cover <- lm(HL_cover ~ SL_cover, data = ind_data_2024)
range.x <- range(ind_data_2024$SL_cover)
new.x <- data.frame(SL_cover = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.SL_cover,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(SL_cover = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(ind_data_2024, aes(x = SL_cover, y = HL_cover)) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = SL_cover, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = SL_cover, ymin = lower, ymax = upper),
              data = new.y,
              color = NA, fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Deckung Strauchschicht [%]",
       y = "Deckung Krautschicht [%]") +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_HL_cover~SL_cover_2024.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

**Deckung Krautschicht \~ Deckung offener Boden**

```{r}
lm.soil_cover <- lm(HL_cover ~ soil_cover, data = ind_data_2024)
range.x <- range(ind_data_2024$soil_cover)
new.x <- data.frame(soil_cover = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.soil_cover,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(soil_cover = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(ind_data_2024, aes(x = soil_cover, y = HL_cover)) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = soil_cover, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = soil_cover, ymin = lower, ymax = upper),
              data = new.y,
              color = NA, fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Deckung offener Boden [%]",
       y = "Deckung Krautschicht [%]") +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_HL_cover~soil_cover_2024.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

**Deckung Krautschicht \~ Deckung Moosschicht**

```{r}
lm.moss_cover <- lm(HL_cover ~ moss_cover, data = ind_data_2024)
range.x <- range(ind_data_2024$moss_cover)
new.x <- data.frame(moss_cover = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.moss_cover,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(moss_cover = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(ind_data_2024, aes(x = moss_cover, y = HL_cover)) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = moss_cover, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = moss_cover, ymin = lower, ymax = upper),
              data = new.y,
              color = NA, fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Deckung Moosschicht [%]",
       y = "Deckung Krautschicht [%]") +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_HL_cover~moss_cover_2024.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

<br>

## Verschieben der Modell-Ergebnistabelle

Direktes Abspeichern nach jedem Modell im Ordner führte zu Problemen. Daher nachträgliches Verschieben in den vorgesehenen Ordner.

```{r, eval=FALSE}
file.rename("Model.result.tables_2024.xlsx", "Result Tables/Model.result.tables_2024.xlsx")
```

<br>

<br>

# **4. Ökologische Modellierung 2019 + 2024**

<br>

## Zusammenführen von Daten

```{r}
ind_data_2024$year <- 2024
ind_data_2019$year <- 2019

common_columns <- intersect(names(ind_data_2024), names(ind_data_2019))

ind_data_2024_common <- ind_data_2024[, c(common_columns, "year")]
ind_data_2019_common <- ind_data_2019[, c(common_columns, "year")]

names(ind_data_2024_common) <- common_columns
names(ind_data_2019_common) <- common_columns

ind_data_merged <- rbind(ind_data_2024_common, ind_data_2019_common)
```

<br>

## Korrelationsmatrix

```{r}
#| warning: false
#| output: false
subsetcorr <- subset(ind_data_merged, select=c(nb.stem, stem.per.sqm, prop.flower, area.bunch, nb.flower, stem.height, exposition, slope, soil_water, PAR, HL_cover, SL_cover, soil_cover, moss_cover))
#make matrix
cormatrix <- cor(subsetcorr)
corpvalues <- cor.mtest(subsetcorr)
#matrix with numbers
png("Plots/corrmatrix_numbers_merged.png", width = 25, height = 25, units = "cm", res = 300)
corrplot(cormatrix, p.mat=corpvalues$p, type="upper", method="number")
dev.off()
#matrix with circles
png("Plots/corrmatrix_circle_merged.png", width = 25, height = 25, units = "cm", res = 300)
corrplot(cormatrix, p.mat=corpvalues$p, type="upper", method="circle")
dev.off()
```

```{r}
#| warning: false
#| output: true

corrplot(cormatrix, p.mat=corpvalues$p, type="upper", method="number")
corrplot(cormatrix, p.mat=corpvalues$p, type="upper", method="circle")
```

## Modell zu Sprosszahl pro Horst (nb.stem)

Erstellen und Simplifikation des Modells. Außerdem Exportieren der Ergebnisse in Excel-Datei.

```{r}
#| warning: false
#| output: false

glm1 <- glm.nb(nb.stem ~ management2 + exposition + slope + soil_depth + soil_water + PAR + HL_cover + SL_cover + soil_cover + moss_cover, data = ind_data_merged)
summary(glm1)

glm2 <- stepAIC(glm1)
summary(glm2)



model_final <- glm2
```

```{r, eval=FALSE}
write_model_table(model.result = model_final, file.name = "Model.result.tables_2024.xlsx")
```

```{r}
summary(model_final)
```

Testen der Modell-Voraussetzungen.

```{r}
par(mfrow = c(2, 2))
plot(model_final)
par(mfrow = c(1, 1))

check_model(model_final)
```

### Visualisierungen

**Sprosszahl pro Horst \~ Alle signifikanten Umweltvariablen**

```{r, eval=FALSE}
pplot_reg.lines.single.plots(model_final, ind_data_merged, "merged")
```

<br>

## Modell zu Blüherfolg (cbind(nb.flower, nb.stem))

Erstellen und Simplifikation des Modells. Außerdem Exportieren der Ergebnisse in Excel-Datei.

```{r}
#| warning: false
#| output: false

glm1 <- glm(cbind(nb.flower, nb.stem) ~ management2 + exposition + slope + soil_depth + soil_water + PAR + HL_cover + SL_cover + soil_cover + moss_cover, data = ind_data_merged, family = binomial)

summary(glm1)

glm2 <- stepAIC(glm1)
summary(glm2)

glm3 <- update(glm2, .~. -PAR)
anova(glm2, glm3)
summary(glm3)

glm4 <- update(glm3, .~. -soil_cover)
anova(glm3, glm4)
summary(glm4)

model_final <- glm4
```

```{r, eval=FALSE}
write_model_table(model.result = model_final, file.name = "Model.result.tables_2024.xlsx")
```

```{r}
summary(model_final)
```

Testen der Modell-Voraussetzungen.

```{r}
par(mfrow = c(2, 2))
plot(model_final)
par(mfrow = c(1, 1))

check_model(model_final)
```

### Visualisierungen

**Blüherfolg \~ Bodentiefe**

```{r}
glm.soil_depth <- glm(car::logit(prop.flower, adjust = 0.0001) ~ soil_depth, data = ind_data_merged)
range.x <- range(ind_data_merged$soil_depth)
new.x <- data.frame(soil_depth = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(glm.soil_depth,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(soil_depth = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(data = ind_data_merged,
               aes_string(y = "prop.flower", x = "soil_depth")) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = soil_depth, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = soil_depth, ymin = lower, ymax = upper),
              data = new.y,
              color = NA,
              fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Bodentiefe [cm]",
       y = "Anteil blühender Sprosse [%]") +
  scale_y_continuous(
    breaks = seq(0, 100, 25),  # Specify the breaks
    labels = seq(0, 100, 25)) +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        plot.margin = unit(c(0, 0.05, 0.2, 0), "cm"),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_prop.flower~soil_depth_merged.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

**Blüherfolg \~ Deckung Krautschicht**

```{r}
lm.HL_cover <- lm(car::logit(prop.flower, adjust = 0.0001) ~ HL_cover, data = ind_data_merged)
range.x <- range(ind_data_merged$HL_cover)
new.x <- data.frame(HL_cover = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.HL_cover,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(HL_cover = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = invlogit(fit - 1.96*se.fit), 
         point.estimate = invlogit(fit), 
         upper = invlogit(fit + 1.96*se.fit)) 



plot <- ggplot(data = ind_data_merged,
               aes_string(y = "prop.flower", x = "HL_cover")) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = HL_cover, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = HL_cover, ymin = lower, ymax = upper),
              data = new.y,
              color = NA,
              fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Deckung Krautschicht [%]",
       y = "Anteil blühender Sprosse [%]") +
  scale_y_continuous(
    breaks = seq(0, 100, 25),  # Specify the breaks
    labels = seq(0, 100, 25)) +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        plot.margin = unit(c(0, 0.05, 0.2, 0), "cm"),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_prop.flower~HL_cover_merged.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

<br>

## Modell zu Sprossanzahl pro m² Horstgröße (stem.per.sqm)

Erstellen und Simplifikation des Modells. Außerdem Exportieren der Ergebnisse in Excel-Datei.

```{r}
#| warning: false
#| output: false

lm1 <- lm(stem.per.sqm ~ management2 + exposition + slope + soil_depth + soil_water + PAR + HL_cover + SL_cover + soil_cover + moss_cover, data = ind_data_merged)
summary(lm1)

lm2 <- stepAIC(lm1)
summary(lm2)

lm3 <- update(lm2, .~. -slope)
anova(lm2, lm3)
summary(lm3)


model_final <- lm3
```

```{r, eval=FALSE}
write_model_table(model.result = model_final, file.name = "Model.result.tables_2024.xlsx")
```

```{r}
summary(model_final)
```

Testen der Modell-Voraussetzungen.

```{r}
par(mfrow = c(2, 2))
plot(model_final)
par(mfrow = c(1, 1))

check_model(model_final)
```

### Visualisierungen

**Sprossanzahl pro m² Horstgröße \~ Bodenfeuchte**

```{r}
lm.soil_water <- lm(stem.per.sqm ~ soil_water, data = ind_data_merged)
range.x <- range(ind_data_merged$soil_water)
new.x <- data.frame(soil_water = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.soil_water,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(soil_water = seq(from = range.x[1], to = range.x[2], 0.1),
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(ind_data_merged, aes(x = soil_water, y = stem.per.sqm)) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = soil_water, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = soil_water, ymin = lower, ymax = upper),
              data = new.y,
              color = NA, fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Bodenfeuchte [%]",
       y = "Sprossanzahl pro m² Horstgröße") +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_stem.per.sqm~soil_water_merged.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

<br>

## Modell zu Deckung Krautschicht (HL_cover)

Erstellen und Simplifikation des Modells. Außerdem Exportieren der Ergebnisse in Excel-Datei.

```{r}
#| warning: false
#| output: false

lm1 <- lm(HL_cover ~ management2 + exposition + slope + soil_depth + soil_water + PAR + SL_cover + soil_cover + moss_cover, data = ind_data_merged)
summary(lm1)

lm2 <- stepAIC(lm1)
summary(lm2)


model_final <- lm2
```

```{r, eval=FALSE}
write_model_table(model.result = model_final, file.name = "Model.result.tables_2024.xlsx")
```

```{r}
summary(model_final)
```

Testen der Modell-Voraussetzungen.

```{r}
par(mfrow = c(2, 2))
plot(model_final)
par(mfrow = c(1, 1))

check_model(model_final)
```

### Visualisierungen

**Deckung Krautschicht \~ Deckung Strauchschicht**

```{r}
lm.slope <- lm(HL_cover ~ slope, data = ind_data_merged)
range.x <- range(ind_data_merged$slope)
new.x <- data.frame(slope = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.slope,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(slope = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(ind_data_merged, aes(x = slope, y = HL_cover)) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = slope, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = slope, ymin = lower, ymax = upper),
              data = new.y,
              color = NA, fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Deckung Strauchschicht [%]",
       y = "Deckung Krautschicht [%]") +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_HL_cover~slope_merged.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

**Deckung Krautschicht \~ Photosynthetisch aktive Strahlung**

```{r}
lm.PAR <- lm(HL_cover ~ PAR, data = ind_data_merged)
range.x <- range(ind_data_merged$PAR)
new.x <- data.frame(PAR = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.PAR,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(PAR = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(ind_data_merged, aes(x = PAR, y = HL_cover)) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = PAR, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = PAR, ymin = lower, ymax = upper),
              data = new.y,
              color = NA, fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Photosynthetisch aktive Strahlung [%]",
       y = "Deckung Krautschicht [%]") +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_HL_cover~PAR_merged.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

**Deckung Krautschicht \~ Deckung offener Boden**

```{r}
lm.soil_cover <- lm(HL_cover ~ soil_cover, data = ind_data_merged)
range.x <- range(ind_data_merged$soil_cover)
new.x <- data.frame(soil_cover = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.soil_cover,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(soil_cover = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(ind_data_merged, aes(x = soil_cover, y = HL_cover)) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = soil_cover, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = soil_cover, ymin = lower, ymax = upper),
              data = new.y,
              color = NA, fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Deckung offener Boden [%]",
       y = "Deckung Krautschicht [%]") +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_HL_cover~soil_cover_merged.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

**Deckung Krautschicht \~ Deckung Moosschicht**

```{r}
lm.moss_cover <- lm(HL_cover ~ moss_cover, data = ind_data_merged)
range.x <- range(ind_data_merged$moss_cover)
new.x <- data.frame(moss_cover = seq(from = range.x[1], to = range.x[2], 0.1))
new.y <- predict(lm.moss_cover,
                 newdata = new.x,
                 se.fit = TRUE) %>% 
  as.data.frame() %>% 
  mutate(moss_cover = seq(from = range.x[1], to = range.x[2], 0.1), 
         lower = (fit - 1.96*se.fit), 
         point.estimate = (fit), 
         upper = (fit + 1.96*se.fit))


plot <- ggplot(ind_data_merged, aes(x = moss_cover, y = HL_cover)) +
  geom_point(colour = "black",
             alpha = 0.25,
             shape = 16,
             size = 0.6) +
  geom_line(aes(x = moss_cover, y = point.estimate),
            data = new.y,
            colour = "darkgreen",
            linewidth = 1) + 
  geom_ribbon(aes(x = moss_cover, ymin = lower, ymax = upper),
              data = new.y,
              color = NA, fill = "green",
              alpha = 0.35,
              inherit.aes = FALSE) + 
  labs(x = "Deckung Moosschicht [%]",
       y = "Deckung Krautschicht [%]") +
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        legend.position = "none")

plot
```

```{r, eval=FALSE}
ggsave(filename = "Plots/regline_HL_cover~moss_cover_merged.png", plot = plot, width = 7.4, height = 7.4, units = "cm")
```

<br>

## Verschieben der Modell-Ergebnistabelle

Direktes Abspeichern nach jedem Modell im Ordner führte zu Problemen. Daher nachträgliches Verschieben in den vorgesehenen Ordner.

```{r, eval=FALSE}
file.rename("Model.result.tables_merged.xlsx", "Result Tables/Model.result.tables_merged.xlsx")
```
